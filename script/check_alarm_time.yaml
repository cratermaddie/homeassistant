check_alarm_time:
  sequence:
    - service: media_player.turn_on
      entity_id: media_player.bedroom_speaker
    - wait_template: "{{ is_state('media_player.bedroom_speaker', 'idle') }}"
      timeout: '00:00:05'
      continue_on_timeout: 'true'
    - service: var.set
      data:
        entity_id: var.volume_temp
        value_template: "{{ state_attr('media_player.bedroom_speaker', 'volume_level')| float | round(2)}}"
    - service: media_player.volume_set
      data_template:
        entity_id: media_player.bedroom_speaker
        volume_level: 0.4
    - service: tts.google_translate_say
      entity_id: media_player.bedroom_speaker
      data_template:
        message: >-
          {% if (states('sensor.auto_alarm_time_ts') | float) | timestamp_custom('%M') == '00' %}
          {% set alarm_time = states('sensor.auto_alarm_time_ts') | float | timestamp_custom('%-H') %}
          {% else %}
          {% set alarm_time = states('sensor.auto_alarm_time_display') %}
          {% endif %}
          {% if as_timestamp(state_attr("calendar.personal_trigger", "start_time")) | timestamp_custom('%M') == '00' %}
          {% set event_time = as_timestamp(state_attr("calendar.personal_trigger", "start_time")) | timestamp_custom('%-H') %}
          {% else %}
          {% set event_time = as_timestamp(state_attr("calendar.personal_trigger", "start_time")) | timestamp_custom('%-H %M') %}
          {% endif %}


          I'll be waking you up for {{ state_attr('calendar.personal_trigger', 'message') }} around {{ alarm_time | replace(':', ' ') }}
    - wait_template: "{{ is_state('media_player.bedroom_speaker', 'playing') }}"
    - wait_template: "{{ is_state('media_player.bedroom_speaker', 'idle') }}"
    - service: media_player.volume_set
      data_template:
        entity_id: media_player.bedroom_speaker
        volume_level: "{{ states('var.volume_temp')| float }}"
    - service: media_player.turn_off
      entity_id: media_player.bedroom_speaker