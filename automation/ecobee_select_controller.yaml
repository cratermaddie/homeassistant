- alias: Update ecobee mode select on state change
  mode: restart
  trigger:
      - platform: state
        entity_id: sensor.hvac_mode
  condition:
    - condition: template
      value_template: "{{ not is_state('sensor.hvac_mode','temp') }}"
  action:
    - service: input_select.select_option
      data:
        entity_id: 
          - input_select.ecobee_modes
        option: "{{ state_attr('climate.thermostat','preset_mode') }}"
#    - service: climate.set_preset_mode
#      data:
#        entity_id: climate.thermostat
#        preset_mode: "{{ states('input_select.ecobee_modes') }}"

- alias: Update ecobee mode on state change
  mode: restart
  trigger:
      - platform: state
        entity_id: input_select.ecobee_modes
  condition:
    - condition: template
      value_template: "{{ not is_state('input_select.ecobee_modes','') }}"
  action:
    - service: climate.set_preset_mode
      data:
        entity_id: climate.thermostat
        preset_mode: "{{ states('input_select.ecobee_modes') }}"
#    - service: input_select.select_option
#      data:
#        entity_id: 
#          - input_select.ecobee_modes
#        option: "{{ state_attr('climate.thermostat','preset_mode') }}"


- alias: revert ecobee select if blank is selected
  mode: restart
  trigger:
      - platform: state
        entity_id: input_select.ecobee_modes
        to: ''
  condition:
    - condition: template
      value_template: "{{ not is_state('sensor.hvac_mode','temp') }}"
  action:
    - service: input_select.select_option
      data:
        entity_id: 
          - input_select.ecobee_modes
        option: "{{ trigger.from_state.state }}"

- alias: Select blank option when temp hvac mode
  mode: restart
  trigger:
      - platform: state
        entity_id: sensor.hvac_mode
        to: 'temp'
  action:
    - service: input_select.select_option
      data:
        entity_id: 
          - input_select.ecobee_modes
        option: ''